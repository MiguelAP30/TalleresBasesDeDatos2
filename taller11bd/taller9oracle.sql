-- TALLER 9 oracle
ALTER USER "TALLER9ORACLE" QUOTA UNLIMITED ON USERS;

-- Crear tabla conceptos
CREATE TABLE conceptos(
    codigo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(20) NOT NULL CHECK (nombre IN ('salario', 'horas_extra', 'prestaciones', 'impuestos')),
    porcentaje NUMBER NOT NULL
);

-- Crear tabla tipo_contrato
CREATE TABLE tipo_contrato(
    codigo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cargo VARCHAR2(20) NOT NULL,
    salario_total NUMBER NOT NULL
);

-- Crear tabla empleados
CREATE TABLE empleados(
    identificacion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(50) NOT NULL,
    tipo_contrato_id NUMBER NOT NULL,
    FOREIGN KEY (tipo_contrato_id) REFERENCES tipo_contrato(codigo)
);

-- Crear tabla nomina
CREATE TABLE nomina(
    codigo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mes NUMBER NOT NULL,
    anio NUMBER NOT NULL,
    fecha_pago DATE NOT NULL,
    total_devengado NUMBER NOT NULL,
    total_deducciones NUMBER NOT NULL,
    total NUMBER NOT NULL,
    empleado_id NUMBER,
    FOREIGN KEY (empleado_id) REFERENCES empleados(identificacion)
);

-- Crear tabla detalles_nomina
CREATE TABLE detalles_nomina(
    codigo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    valor NUMBER NOT NULL,
    concepto_id NUMBER,
    nomina_id NUMBER,
    FOREIGN KEY (concepto_id) REFERENCES conceptos(codigo),
    FOREIGN KEY (nomina_id) REFERENCES nomina(codigo)
);

-- Parte 1: Poblar la base de datos
BEGIN
    INSERT INTO tipo_contrato (cargo, salario_total) VALUES ('Cargo1', 1000);
    INSERT INTO tipo_contrato (cargo, salario_total) VALUES ('Cargo2', 2000);
    INSERT INTO tipo_contrato (cargo, salario_total) VALUES ('Cargo3', 3000);
    INSERT INTO tipo_contrato (cargo, salario_total) VALUES ('Cargo4', 4000);
    INSERT INTO tipo_contrato (cargo, salario_total) VALUES ('Cargo5', 5000);
END;


CREATE OR REPLACE PROCEDURE poblar_bd IS
    v_empleados NUMBER := 1;
    v_tipo_contrato_id NUMBER;
    v_conceptos NUMBER := 1;
    v_nomina NUMBER := 1;
    v_detalles_nomina NUMBER;
    v_porcentaje NUMBER := 0.1;
    v_mes NUMBER := 1;
    v_anio NUMBER := 2021;
    v_empleado_id NUMBER;
    v_concepto_id NUMBER;
    v_nomina_id NUMBER;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Iniciando inserción de empleados...');
    -- Insertar empleados después de insertar tipos de contrato
    FOR rec IN (SELECT codigo FROM tipo_contrato) LOOP
        INSERT INTO empleados(nombre, tipo_contrato_id)
        VALUES('Empleado ' || v_empleados, rec.codigo)
        RETURNING identificacion INTO v_empleado_id;

        DBMS_OUTPUT.PUT_LINE('Insertado empleado: ' || v_empleado_id || ' con tipo_contrato_id: ' || rec.codigo);

        v_empleados := v_empleados + 1;
    END LOOP;

    -- Insertar conceptos
    DBMS_OUTPUT.PUT_LINE('Iniciando inserción de conceptos...');
    WHILE v_conceptos <= 4 LOOP
        CASE v_conceptos
            WHEN 1 THEN
                INSERT INTO conceptos(nombre, porcentaje)
                VALUES('salario', v_porcentaje);
            WHEN 2 THEN
                INSERT INTO conceptos(nombre, porcentaje)
                VALUES('horas_extra', v_porcentaje);
            WHEN 3 THEN
                INSERT INTO conceptos(nombre, porcentaje)
                VALUES('prestaciones', v_porcentaje);
            WHEN 4 THEN
                INSERT INTO conceptos(nombre, porcentaje)
                VALUES('impuestos', v_porcentaje);
        END CASE;

        v_conceptos := v_conceptos + 1;
        v_porcentaje := v_porcentaje + 0.1;
    END LOOP;

    -- Insertar nóminas y detalles de nómina
    DBMS_OUTPUT.PUT_LINE('Iniciando inserción de nóminas...');
    FOR rec IN (SELECT identificacion FROM empleados) LOOP
        -- Insertar nómina
        INSERT INTO nomina(mes, anio, fecha_pago, total_devengado, total_deducciones, total, empleado_id)
        VALUES(v_mes, v_anio, TO_DATE('2021-01-01', 'YYYY-MM-DD'), 1000, 100, 900, rec.identificacion)
        RETURNING codigo INTO v_nomina_id;

        DBMS_OUTPUT.PUT_LINE('Insertada nómina para empleado_id: ' || rec.identificacion || ' con nómina_id: ' || v_nomina_id);

        -- Insertar detalles de nómina
        v_detalles_nomina := 1;
        FOR rec_concepto IN (SELECT codigo FROM conceptos) LOOP
            INSERT INTO detalles_nomina(valor, concepto_id, nomina_id)
            VALUES(100, rec_concepto.codigo, v_nomina_id);

            DBMS_OUTPUT.PUT_LINE('Insertado detalle_nomina con concepto_id: ' || rec_concepto.codigo || ' y nomina_id: ' || v_nomina_id);

            v_detalles_nomina := v_detalles_nomina + 1;

            -- Salir si ya insertaste 15 detalles (aunque debería ser 4 conceptos)
            IF v_detalles_nomina > 15 THEN
                EXIT;
            END IF;
        END LOOP;

        v_nomina := v_nomina + 1;
        v_mes := v_mes + 1;

        -- Salir si ya insertaste 5 nóminas
        IF v_nomina > 5 THEN
            EXIT;
        END IF;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('Población de la base de datos completada.');
END;

-- Llamar al procedimiento poblar_bd
BEGIN
    poblar_bd;
END;


-- Parte 2: Crear función obtener_nomina_empleado
CREATE OR REPLACE FUNCTION obtener_nomina_empleado(
    p_empleado_id NUMBER,
    p_mes NUMBER,
    p_anio NUMBER
) RETURN SYS_REFCURSOR IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT e.nombre, n.total_devengado, n.total_deducciones, n.total
    FROM empleados e
    JOIN nomina n ON e.identificacion = n.empleado_id
    WHERE e.identificacion = p_empleado_id AND n.mes = p_mes AND n.anio = p_anio;
    RETURN v_cursor;
END;


-- Llamar a la función obtener_nomina_empleado
DECLARE
    v_cursor SYS_REFCURSOR;
    v_nombre VARCHAR2(50);
    v_total_devengado NUMBER;
    v_total_deducciones NUMBER;
    v_total NUMBER;
BEGIN
    -- Llamar a la función obtener_nomina_empleado
    v_cursor := obtener_nomina_empleado(1, 1, 2021);
    
    LOOP
        FETCH v_cursor INTO v_nombre, v_total_devengado, v_total_deducciones, v_total;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Nombre: ' || v_nombre || ', Total Devengado: ' || v_total_devengado || ', Total Deducciones: ' || v_total_deducciones || ', Total: ' || v_total);
    END LOOP;
    
    CLOSE v_cursor;
END;


-- Parte 3: Crear función total_por_contrato
CREATE OR REPLACE FUNCTION total_por_contrato(
    p_tipo_contrato_id NUMBER
) RETURN SYS_REFCURSOR IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT e.nombre, n.fecha_pago, n.anio, n.mes, n.total_devengado, n.total_deducciones, n.total
    FROM empleados e
    JOIN nomina n ON e.identificacion = n.empleado_id
    WHERE e.tipo_contrato_id = p_tipo_contrato_id;
    RETURN v_cursor;
END;

-- Llamar a la función total_por_contrato
DECLARE
    v_cursor SYS_REFCURSOR;
    v_nombre VARCHAR2(50);
    v_fecha_pago DATE;
    v_anio NUMBER;
    v_mes NUMBER;
    v_total_devengado NUMBER;
    v_total_deducciones NUMBER;
    v_total NUMBER;
BEGIN
    -- Llamar a la función total_por_contrato
    v_cursor := total_por_contrato(1);
    
    LOOP
        FETCH v_cursor INTO v_nombre, v_fecha_pago, v_anio, v_mes, v_total_devengado, v_total_deducciones, v_total;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Nombre: ' || v_nombre || ', Fecha de Pago: ' || v_fecha_pago || ', Año: ' || v_anio || ', Mes: ' || v_mes || ', Total Devengado: ' || v_total_devengado || ', Total Deducciones: ' || v_total_deducciones || ', Total: ' || v_total);
    END LOOP;
    
    CLOSE v_cursor;
END;

